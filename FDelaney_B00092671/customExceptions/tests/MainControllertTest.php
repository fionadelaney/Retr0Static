<?php
namespace ItbTests;

use Silex\WebTestCase;

use Itb\MainController;
use Symfony\Component\HttpFoundation\Request;

class MainControllertTest extends WebTestCase
{
    private $request;

    /**
     * special setup - run before each test
     * so controllers can get a Silex application object (e.g. to redirect with etc.)
     *
     * @return \Silex\Application
     */
    public function createApplication()
    {
        // app.php must return an Application instance
        $app = require __DIR__ . '/../app/setup.php';
        unset($app['exception_handler']);

        // allows us to test sessions
        $app['session.test'] = true;

        return $app;
    }

    /**
     * pre-test setup
     * here we are creating an empty, GET method Request object
     * (since controllers expect a Request object argument)
     */
    public function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->request = new Request(['', 'get']);
    }

    public function testIndex()
    {
        // Arrange
        $expectedText = 'I am the home page';
        $mainController = new MainController();

        // Act
        $result = $mainController->indexAction($this->request, $this->app);

        // Assert
        $this->assertContains($expectedText, $result);
    }


    public function testAbout()
    {
        // Arrange
        $expectedText = 'about';
        $expectedText2 = ' I like to eat a lot of carrots';

        $mainController = new MainController();

        // Act
        $result = $mainController->aboutAction($this->request, $this->app);

        // Assert
        $this->assertContains($expectedText, $result);
        $this->assertContains($expectedText2, $result);
    }

    public function testList()
    {
        // Arrange
        $expectedText = 'List of products';

        $mainController = new MainController();

        // Act
        $result = $mainController->listAction($this->request, $this->app);

        // Assert
        $this->assertContains($expectedText, $result);
    }

    /*
     * product name = carrots
price = 6.99

product name = eggs
price = 9.99
     */

    /**
     * @dataProvider provideListExpectedText
     */
    public function testListTextFromDatabaseItems($expectedNameText, $expectedPriceText)
    {
        // Arrange
        $mainController = new MainController();

        // Act
        $result = $mainController->listAction($this->request, $this->app);

        // Assert
        $this->assertContains($expectedNameText, $result);
        $this->assertContains($expectedPriceText, $result);
    }

    public function provideListExpectedText()
    {
        return [
            ['product name = carrots', 'price = 7.50'],
            ['product name = eggs', 'price = 9.99'],
        ];
    }


    public function testShowAction()
    {
        // Arrange
        $expectedText = 'Show one product';
        $mainController = new MainController();

        // Act
        $result = $mainController->showAction($this->request, $this->app, 1);

        // Assert
        $this->assertContains($expectedText, $result);
    }

    public function testNotRecordForIdError()
    {
        // Arrange
        $expectedText = 'error - sorry no product can be found with id ';
        $mainController = new MainController();

        // Act
        $result = $mainController->badIdAction($this->request, $this->app, 1);

        // Assert
        $this->assertContains($expectedText, $result);
    }


    public function testNotIntegerError()
    {
        // Arrange
        $expectedText = 'error - product ID must be an integer!';
        $mainController = new MainController();

        // Act
        $result = $mainController->badIDNotIntegerAction($this->request, $this->app, 1);

        // Assert
        $this->assertContains($expectedText, $result);
    }

    /**
     * to test a REDIRECT we caputure the Reponse object
     * and get its 'TargetUrl' - which is the URL corresponding to the route logic has been redirected to
     */
    public function testNotRecordForIdErrorViaShowAction()
    {
        // Arrange
        $mainController = new MainController();
        $id = 99;
        $expectedResult = '/errorBadId/' . $id;

        // Act

        /**
         * @var \Symfony\Component\HttpFoundation\RedirectResponse $resultResponse
         */
        $resultResponse = $mainController->showAction($this->request, $this->app, $id);
        $result = $resultResponse->getTargetUrl();

        // Assert
        $this->assertEquals($expectedResult, $result);
    }





}